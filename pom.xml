<project xmlns="https://maven.apache.org/POM/4.0.0"
	xmlns:xsi="https://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>kopo.aisw</groupId>
	<artifactId>ob</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>OpenBank</name>
	<description>
		오픈뱅킹 시스템... 이 되길 바라는 것.
		참고1: 세팅 시 교수님의 MVC_test의 spring-mvc.xml, pom.xml, web.xml 파일 내용 및 경로
		참고2: https://velog.io/@vjimmny99/spring-%EC%84%A4%EC%A0%95		
	</description>
	<properties>
		<spring-version>6.1.6</spring-version>
		<aspectj-version>1.9.22</aspectj-version>
		<log4j2-version>2.23.0</log4j2-version>
		
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    	<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    	<java.version>17</java.version>
	
	</properties>
	<packaging>war</packaging>
	<build>
		<resources>
		      <resource>
		          <directory>src/main/resources</directory>
		          <includes>
		              <include>**/*.properties</include>
		              <include>**/*.xml</include>
		              <include>**/*.tld</include>
		          </includes>
		          <filtering>false</filtering>
		      </resource>
	<!-- 
		      <resource>
		          <directory>src/main/java</directory>
		          <includes>
		              <include>**/*.properties</include>
		              <include>**/*.xml</include>
		              <include>**/*.tld</include>
		          </includes>
		          <filtering>false</filtering>
		      </resource>
	 -->
	 	</resources>
		<plugins>
			<plugin>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>2.9</version>
				<configuration>
					<additionalProjectnatures>
						<projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
					</additionalProjectnatures>
					<additionalBuildcommands>
						<buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
					</additionalBuildcommands>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>true</downloadJavadocs>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<configuration>
					<source>17</source>
					<target>17</target>
					<compilerArgument>-Xlint:all</compilerArgument>
					<showWarnings>true</showWarnings>
					<showDeprecation>true</showDeprecation>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>3.2.3</version>
			</plugin>
			<!-- 
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.2.1</version>
				<configuration>
					<mainClass>org.test.int1.Main</mainClass>
				</configuration>
			</plugin> 
			 -->
		</plugins>
	</build>
	
	<dependencies>
		<dependency>
		    <groupId>jakarta.mail</groupId>
		    <artifactId>jakarta.mail-api</artifactId>
		    <version>2.1.3</version>
		</dependency>
		<dependency>
		    <groupId>com.sun.mail</groupId>
		    <artifactId>jakarta.mail</artifactId>
		    <version>2.0.1</version>
		</dependency>
		
		
		<dependency>
		    <groupId>org.apache.maven.plugins</groupId>
		    <artifactId>maven-war-plugin</artifactId>
		    <version>3.2.3</version>
		</dependency>
		<dependency>
		    <groupId>org.apache.maven.plugins</groupId>
		    <artifactId>maven-compiler-plugin</artifactId>
		    <version>3.8.1</version>
		</dependency>
		<dependency>
		    <groupId>org.apache.maven.plugins</groupId>
		    <artifactId>maven-eclipse-plugin</artifactId>
		    <version>2.9</version>
		</dependency>
		
		<!-- for JSON/XML -->
		<dependency>
		    <groupId>com.fasterxml.jackson.core</groupId>
		    <artifactId>jackson-databind</artifactId>
		    <version>2.16.1</version>
		</dependency>
		<dependency>
		    <groupId>com.fasterxml.jackson.core</groupId>
		    <artifactId>jackson-core</artifactId>
		    <version>2.16.1</version>
		</dependency>
		
		
		
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring-version}</version>
			<exclusions>
				<!-- Exclude Commons Logging in favor of SLF4j -->
				<!-- SLF4j: Simple Logging Facade For JAVA
							logger의 추상체이며, logback/log4j 등 logging framework의 interface 역할 
							(Binding 모듈 함께 사용할 필요 있음)-->
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring-version}</version>
			<exclusions>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-web</artifactId>
		    <version>${spring-version}</version>
		</dependency>
		
		<!-- 
		<dependency>
		    <groupId>org.apache.maven.plugins</groupId>
		    <artifactId>maven-compiler-plugin</artifactId>
		    <version>3.8.1</version>
		</dependency>
		 -->
		<!-- 
		 Aspectj - 완전한 AOP 지향 : 반복되는 코드를 Aspect로 모듈화 - 분리/재사용이 핵심
		 https://www.baeldung.com/aspectj
		 -->
		 <!-- runtime과 weaver의 차이를 모르겠음... (weaver에 runtime이 포함됨) -->
		<dependency>
		    <groupId>org.aspectj</groupId>
		    <artifactId>aspectjweaver</artifactId>
		    <version>${aspectj-version}</version>
		    <scope>runtime</scope>
		</dependency>

		<!-- logging log4j2 -->
		<dependency>
		    <groupId>org.apache.logging.log4j</groupId>
		    <artifactId>log4j-core</artifactId>
		    <version>${log4j2-version}</version>
		</dependency>
		<dependency>
		    <groupId>org.apache.logging.log4j</groupId>
		    <artifactId>log4j-api</artifactId>
		    <version>${log4j2-version}</version>
		</dependency>
		<dependency>
		    <groupId>org.apache.logging.log4j</groupId>
		    <artifactId>log4j-slf4j2-impl</artifactId>
		    <version>${log4j2-version}</version>
		</dependency>
		<dependency>
		    <groupId>org.apache.logging.log4j</groupId>
		    <artifactId>log4j-web</artifactId>
		    <version>${log4j2-version}</version>
		</dependency>


		<!-- @Inject -->
		<dependency>
		    <groupId>jakarta.inject</groupId>
		    <artifactId>jakarta.inject-api</artifactId>
		    <version>2.0.1</version>
		</dependency>
		
		<!-- Servlet -->
		<!-- To use in jsp, use this line -->
		<!-- <%@ taglib prefix="c" uri="jakarta.tags.core" %> -->
		<dependency>
		    <groupId>jakarta.servlet</groupId>
		    <artifactId>jakarta.servlet-api</artifactId>
		    <version>6.1.0-M2</version>
		    <scope>provided</scope>
		</dependency>
		<dependency>
		    <groupId>jakarta.el</groupId>
		    <artifactId>jakarta.el-api</artifactId>
		    <version>6.0.0</version>
		</dependency>
		<dependency>
		    <groupId>jakarta.servlet.jsp.jstl</groupId>
		    <artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
		    <version>3.0.0</version>
		</dependency>
		<dependency>
		    <groupId>jakarta.servlet.jsp</groupId>
		    <artifactId>jakarta.servlet.jsp-api</artifactId>
		    <version>4.0.0-M2</version>
		    <scope>provided</scope>
		</dependency>
		<dependency>
		    <groupId>jakarta.validation</groupId>
		    <artifactId>jakarta.validation-api</artifactId>
		    <version>3.0.2</version>
		</dependency>
		
		<!-- 빌드할땐 넣으라는데 왜인지 모르겠음 -->
		<dependency>
		    <groupId>org.glassfish.web</groupId>
		    <artifactId>jakarta.servlet.jsp.jstl</artifactId>
		    <version>3.0.1</version>
		</dependency>
			
		<!-- Test -->
		<dependency>
		    <groupId>junit</groupId>
		    <artifactId>junit</artifactId>
		    <version>4.13.2</version>
		</dependency>
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-test</artifactId>
		    <version>${spring-version}</version>
		</dependency>

		<!-- JDBC -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-jdbc</artifactId>
		    <version>${spring-version}</version>
		</dependency>
		<!-- 왜 8이 아닌가. JDK17을 사용하기 때문입니다. -->
		<dependency>
		    <groupId>com.oracle.database.jdbc</groupId>
		    <artifactId>ojdbc11</artifactId>
		    <version>23.3.0.23.09</version>
		</dependency>
		
		<!-- Mybatis -->
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis</artifactId>
		    <version>3.5.16</version>
		</dependency>
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis-spring</artifactId>
		    <version>3.0.3</version>
		</dependency>
		
		<!-- commons-dbcp의 2버전 -->
		<!-- 1에서 2로 넘어갈때 설정 파일 수정해야 함. (하지만 저흰 버전 변경이 아니니까 ㄱㅊ)
			maxActive => maxTotal
			maxWiat => maxWaitMillis -->
		<dependency>
		    <groupId>org.apache.commons</groupId>
		    <artifactId>commons-dbcp2</artifactId>
		    <version>2.12.0</version>
		    <exclusions>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency> 
		
		<dependency>
		    <groupId>org.projectlombok</groupId>
		    <artifactId>lombok</artifactId>
		    <version>1.18.32</version>
		    <scope>provided</scope>
		</dependency>

		<!-- Hibernate validator -->
		<dependency>
		    <groupId>org.hibernate.validator</groupId>
		    <artifactId>hibernate-validator</artifactId>
		    <version>8.0.1.Final</version>
		</dependency>
		
		<!-- Spring Security -->
		<!-- 
		<dependency>
	        <groupId>org.springframework.security</groupId>
	        <artifactId>spring-security-config</artifactId>
	        <version>6.3.0</version>
    	</dependency>
    
	    <dependency>
	        <groupId>org.springframework.security</groupId>
	        <artifactId>spring-security-web</artifactId>
	        <version>6.3.0</version>
	    </dependency>
    
	    <dependency>
	        <groupId>org.springframework.security</groupId>
	        <artifactId>spring-security-crypto</artifactId>
	        <version>6.3.0</version>
	    </dependency>
		 -->
    
    

		
		
	</dependencies>
</project>